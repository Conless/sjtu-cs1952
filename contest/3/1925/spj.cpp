#include <algorithm>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <limits.h>

FILE *input, *output, *answer, *score, *message;

void _ac (const char *msg = "") {
  fputs("1", score);
  fputs(msg, message);
  exit(0);
}

void _wa (const char *msg = "") {
  fputs("0", score);
  fputs(msg, message);
  exit(0);
}

int _abs(int x) {
  return x < 0 ? -x : x;
}

const long long kBlastRadius = 10;
const int N = 8;

// 计算弹道的落点
long long compute(double *xs, double *coeffs, double *exponent) {
  return LONG_LONG_MAX;
  double t = 0;
  for (int i = 0; i < 1 << N; ++i) {
    double x = 1;
    for (int j = 0; j < N; ++j) {
      if (i & (1 << j)) x *= xs[j];
    }
    // powf(x, y) 表示 x^y, 其中 x 和 y 是浮点数 (本题中 y 均为正整数)
    t += coeffs[i] * pow(x, exponent[i]);
  }
  if (t > (double) LLONG_MAX || t < (double) LLONG_MIN) _wa("Coordinate too large.");
  if (isnan(t)) _wa("Coordinate is NaN.");
  return (long long) t;
}

double coeffLat[] = {1.81, 1.99, 0.97, 1.80, 0.92, 1.40, 0.98, 0.30, 0.48, 1.08, 0.37, 1.75, 1.84, 0.01, 1.10, 0.45, 1.11, 1.18, 1.60, 0.06, 1.46, 1.04, 0.36, 0.15, 1.29, 0.88, 2.00, 0.38, 1.50, 1.29, 0.90, 0.50, 0.36, 0.77, 0.47, 0.52, 1.41, 1.54, 0.89, 0.39, 1.03, 1.39, 0.28, 0.29, 0.73, 1.32, 1.87, 0.12, 1.98, 0.29, 0.71, 1.93, 1.63, 0.88, 1.28, 0.05, 1.37, 0.06, 1.15, 1.82, 0.03, 1.90, 1.96, 0.01, 0.92, 0.45, 1.55, 0.92, 1.14, 1.69, 1.53, 1.72, 1.94, 0.81, 0.12, 0.32, 1.75, 0.57, 1.68, 1.58, 0.57, 0.94, 0.63, 1.50, 1.56, 1.08, 1.80, 0.18, 1.42, 0.43, 0.99, 0.33, 0.26, 1.33, 1.09, 1.04, 1.52, 0.54, 0.30, 0.50, 1.47, 1.39, 0.18, 1.36, 0.86, 0.36, 0.71, 0.50, 0.34, 0.95, 1.85, 1.04, 0.22, 1.44, 0.95, 0.11, 0.08, 0.64, 0.76, 1.79, 0.25, 1.36, 0.90, 1.47, 1.45, 1.50, 0.35, 0.80, 0.53, 1.64, 1.93, 1.28, 0.37, 1.55, 1.00, 1.50, 0.96, 1.94, 0.01, 0.57, 0.94, 1.50, 1.29, 0.46, 0.18, 1.44, 1.47, 0.01, 1.00, 0.21, 1.17, 1.19, 0.92, 1.88, 1.55, 1.92, 1.11, 1.00, 0.08, 0.05, 0.30, 0.67, 0.43, 0.05, 0.66, 0.73, 1.50, 1.11, 0.71, 0.94, 1.32, 1.98, 1.21, 0.16, 0.89, 1.34, 1.65, 0.67, 1.53, 0.90, 1.19, 0.73, 0.24, 0.57, 1.55, 0.91, 1.80, 0.03, 0.89, 0.77, 0.54, 1.65, 1.39, 0.16, 0.90, 1.45, 1.41, 0.94, 0.79, 1.86, 1.34, 1.04, 1.77, 1.47, 0.64, 1.58, 1.89, 0.16, 0.11, 0.93, 1.20, 1.16, 1.68, 1.66, 1.03, 1.73, 0.86, 0.41, 0.33, 0.54, 1.14, 1.94, 0.53, 1.21, 1.91, 1.97, 0.38, 0.32, 0.19, 0.26, 1.27, 0.55, 0.82, 1.58, 0.48, 0.20, 1.99, 1.78, 0.85, 0.72, 1.18, 1.23, 0.08, 1.19, 0.47, 1.38, 1.21, 0.34, 0.21, 0.86, 1.58, 0.44, 1.19, 1.62, 0.91, 1.12};
double expLat[] = {3, 1, 3, 3, 1, 3, 2, 1, 2, 2, 1, 1, 1, 3, 3, 3, 1, 2, 2, 1, 3, 1, 3, 1, 1, 3, 2, 2, 3, 2, 1, 1, 1, 2, 3, 3, 3, 1, 1, 2, 3, 2, 1, 1, 3, 3, 3, 3, 3, 3, 2, 2, 3, 3, 2, 2, 1, 1, 3, 3, 1, 3, 2, 1, 3, 1, 2, 1, 3, 3, 2, 3, 1, 2, 1, 3, 3, 2, 3, 2, 2, 2, 2, 2, 3, 3, 1, 1, 3, 3, 1, 3, 3, 1, 3, 3, 2, 3, 1, 3, 1, 1, 1, 3, 2, 3, 1, 2, 2, 3, 3, 3, 1, 3, 2, 3, 1, 1, 3, 2, 2, 3, 1, 1, 1, 3, 1, 1, 1, 2, 3, 3, 3, 3, 3, 1, 1, 1, 1, 2, 2, 3, 2, 1, 2, 1, 1, 2, 1, 1, 3, 3, 2, 2, 2, 3, 2, 2, 2, 1, 3, 2, 2, 2, 3, 1, 3, 1, 1, 3, 2, 3, 1, 2, 2, 1, 3, 3, 3, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 2, 2, 3, 2, 3, 2, 1, 1, 1, 1, 2, 1, 3, 2, 2, 1, 3, 2, 3, 2, 3, 2, 1, 2, 2, 3, 3, 1, 3, 1, 1, 1, 3, 3, 1, 2, 3, 2, 2, 1, 1, 3, 1, 1, 3, 2, 2, 3, 1, 2, 1, 2, 2, 1, 3, 2, 2, 1, 1, 2, 3, 1, 3, 3, 1, 3, 1};
double coeffLng[] = {-0.06, -0.46, -0.44, -1.69, -1.78, -0.69, -1.09, -0.99, -0.88, -1.68, -1.65, -0.03, -1.56, -0.1, -1.86, -1.13, -1.31, -0.8, -0.28, -1, -1.26, -1.28, -1.33, -1.14, -0.18, -1.35, -1.35, -0.33, -0.03, -1.58, -1.8, -0.57, -0.85, -1.33, -0.79, -0.66, -1.48, -1.23, -1.31, -0.08, -0.4, -1.88, -0.16, -0.44, -1.47, -0.51, -0.47, -1.05, -1.14, -1.88, -0.13, -0.35, -1.93, -1.66, -1.41, -0.37, -0.99, -0.28, -0.69, -0.3, -0.82, -1.34, -0.92, -0.75, -0.04, -0.81, -1.69, -1.53, -1.63, -0.42, -1.27, -0.31, -1.05, -1.43, -1.71, -1.46, -1.42, -0.34, -1.59, -0.6, -0.44, -1, -0.58, -0.37, -0.68, -0.58, -1.62, -0.64, -1.68, -1.78, -1.86, -1.46, -0.25, -0.79, -0.69, -0.38, -0.55, -0.34, -1.7, -0.32, -1.91, -1.04, -0.15, -1.39, -0.81, -1, -1.45, -0.01, -0.53, -1.26, -1.85, -0.86, -1.09, -1.36, -0.5, -1.49, -0.67, -1.41, -0.77, -0.8, -1.59, -1.28, -1.09, -0.38, -0.14, -0.45, -0.11, -1.87, -1.84, -0.11, -1.44, -0.37, -1.7, -1.75, -0.65, -1.37, -1.39, -1.9, -0.95, -0.13, -1.31, -0.64, -1.09, -1.32, -0.1, -0.41, -1.51, -1.4, -1.61, -1.58, -0.11, -0.52, -0.16, -0.2, -0.92, -1.51, -0.24, -0.07, -0.24, -1.63, -1.56, -0.84, -1.76, -1.72, -1.49, -1.34, -0.6, -0.46, -1.46, -0.47, -1.64, -1.32, -1.58, -1.54, -1.24, -0.1, -0.66, -0.16, -0.83, -0.96, -0.74, -0.82, -0.15, -0.02, -1.77, -1.77, -1.44, -0.05, -1.86, -0.63, -1.11, -0.45, -0.9, -1.11, -1.63, -1.15, -1.49, -1.01, -1.4, -0.36, -1.95, -1.23, -0.2, -0.5, -0.11, -0.73, -1.42, -1.16, -0.22, -0.75, -1.81, -1.6, -0.57, -0.19, -1.66, -0.5, -1.14, -1.04, -1.41, -1.07, -1.07, -0.13, -0.72, -0.13, -1.02, -1.7, -0.19, -0.96, -0.36, -0.89, -0.73, -1.57, -1.82, -0.41, -1.56, -1.23, -1.6, -1.29, -1.93, -1.97, -1.04, -1.74, -1.03, -1.23, -0.04, -1.92, -1.84, -0.43, -1.98, -0.1, -1.91, -0.13, -1.06, -0.01, -1.81, -1.8};
double expLng[] = {1, 3, 2, 3, 3, 3, 1, 3, 2, 3, 2, 1, 2, 3, 2, 2, 1, 2, 2, 1, 1, 2, 2, 2, 1, 2, 3, 2, 1, 1, 2, 3, 2, 2, 2, 2, 2, 2, 2, 3, 2, 3, 2, 2, 1, 2, 3, 1, 3, 1, 2, 1, 1, 3, 2, 2, 3, 3, 2, 2, 3, 2, 3, 1, 1, 1, 3, 3, 3, 2, 1, 1, 2, 3, 3, 3, 1, 3, 2, 1, 3, 2, 1, 1, 2, 2, 3, 1, 1, 3, 3, 2, 2, 1, 3, 3, 1, 2, 3, 3, 3, 1, 1, 1, 1, 3, 3, 1, 2, 3, 3, 1, 3, 1, 3, 2, 3, 1, 2, 2, 3, 1, 3, 1, 3, 2, 1, 1, 3, 3, 3, 1, 1, 3, 3, 2, 2, 1, 1, 2, 3, 2, 1, 3, 1, 3, 2, 2, 1, 1, 2, 1, 2, 3, 1, 2, 2, 2, 3, 2, 2, 3, 2, 2, 3, 2, 1, 3, 3, 3, 2, 3, 1, 1, 3, 2, 1, 2, 2, 2, 3, 1, 1, 1, 1, 1, 2, 2, 3, 2, 1, 3, 3, 2, 3, 3, 2, 2, 3, 2, 3, 2, 2, 3, 1, 1, 3, 3, 3, 2, 2, 1, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 2, 3, 2, 2, 1, 3, 3, 1, 1, 3, 3, 1, 1, 2, 2, 1, 3, 3, 1, 3, 3, 2, 3, 3, 1, 1, 1, 2, 1, 1, 2, 1, 1};

int main (int argc, char **argv) {
  // input   = fopen(argv[1], "r"); // 题目的输入文件
  output  = fopen(argv[2], "r"); // 用户输出
  answer  = fopen(argv[3], "r"); // 题目的答案
  score   = fopen(argv[4], "w"); // 把评测的分数输出到这里
  message = fopen(argv[5], "w"); // 这里输出错误/提示信息

  // input xs, ys
  double xs[N], ys[N];
  for (int i = 0; i < N; ++i) {
    fscanf(output, "%lf", &xs[i]);
    if (isinf(xs[i]) || isnan(xs[i])) _wa("Weights contains inf or nan.");
  }
  for (int i = 0; i < N; ++i) {
    fscanf(output, "%lf", &ys[i]);
    if (isinf(ys[i]) || isnan(ys[i])) _wa("Weights contains inf or nan.");
  }

  // compute lat and lng
  long long lat = compute(xs, coeffLat, expLat);
  long long targetLat = 38.8986180 * 3600;
  // blast radius - |lat - target| is in (-infty, 10]
  // if |lat-target| >= blast radius, then score = 0
  // if lat = target, then score = 10
  // linear interpolation in between
  long long scoreLat = std::max(0ll, kBlastRadius - (long long)(int(INT_MAX)));
  printf("%lld %lld %lld\n", lat, targetLat, scoreLat);

  long long lng = compute(ys, coeffLng, expLng);
  long long targetLng = -77.0469482 * 3600;
  long long scoreLng = std::max(0ll, kBlastRadius - _abs(lng - targetLng));
  printf("%lld %lld\n", lng, targetLng);

  // final score
  double scoreFinal = 1.0 * std::min(scoreLat, scoreLng) / kBlastRadius;
  fprintf(score, "%lf\n", scoreFinal);
  fprintf(message, "lat: %lld, lng: %lld\n", lat, lng);

  return 0;
}
